---
- name: "Install packages"
  notify: "Enable and start Apache2"
  ansible.builtin.package:
    update_cache: true
    name:
      - "apache2"
      - "software-properties-common"
      - "certbot"

- name: "Configure Apache2"
  notify: "Restart Apache2"
  block:
    - name: "Import Apache2 confiruations files"
      loop:
        - "apache2.conf"
        - "ports.conf"
      loop_control:
        loop_var: file
      ansible.builtin.template:
        src: "templates/{{ file }}.j2"
        dest: "/etc/apache2/{{ file }}"
        owner: "root"
        group: "root"
        mode: "0600"

- name: "Install and configure QOS"
  notify: "Restart Apache2"
  when: install_apache_enable_qos | default(false)
  block:
    - name: "Install libapache2-mod-qos"
      ansible.builtin.package:
        update_cache: true
        name:
          - "libapache2-mod-qos"

    - name: "Import mod_qos confiruations files"
      ansible.builtin.template:
        src: "templates/qos.conf.j2"
        dest: "/etc/apache2/mods-available/qos.conf"
        owner: "root"
        group: "root"
        mode: "0600"

    - name: "Enable Apache Qos module"
      community.general.apache2_module:
        state: present
        name: "qos"

- name: "Install and configure Modsecurity"
  notify: "Restart Apache2"
  when: install_apache_enable_security | default(false)
  block:
    - name: "Install libapache2-mod-security2"
      ansible.builtin.package:
        update_cache: true
        name:
          - "libapache2-mod-security2"

    - name: "Import Modsecurity confiruations files"
      loop:
        - { src: "templates/modsecurity.conf.j2", dest: "/etc/apache2/mods-available/modsecurity.conf"}
        - { src: "templates/security2.conf.j2", dest: "/etc/apache2/mods-available/security2.conf"}
      loop_control:
        loop_var: file
      ansible.builtin.template:
        src: "{{ file.src }}"
        dest: "{{ file.dest }}"
        owner: "root"
        group: "root"
        mode: "0600"

    - name: "Check /etc/apache2/modsecurity-crs/coreruleset-{{ install_apache_security_core_version }} directory"
      register: file_check
      ansible.builtin.stat:
        path: "/etc/apache2/modsecurity-crs/coreruleset-{{ install_apache_security_core_version }}"

    - name: "Create /etc/apache2/modsecurity-crs directory"
      when: not file_check.stat.exists
      ansible.builtin.file:
        path: "/etc/apache2/modsecurity-crs/coreruleset-{{ install_apache_security_core_version }}"
        state: directory
        recurse: yes
        owner: "root"
        group: "root"
        mode: "0600"

    - name: "Dowload coreruleset by clone its repository"
      ansible.builtin.git:
        repo: "https://github.com/coreruleset/coreruleset"
        dest: "/etc/apache2/modsecurity-crs/coreruleset-{{ install_apache_security_core_version }}"
        version: "v{{ install_apache_security_core_version }}"

    - name: "Import CRS confiruations files"
      ansible.builtin.template:
        src: "templates/crs-setup.conf.j2"
        dest: "/etc/apache2/modsecurity-crs/coreruleset-{{ install_apache_security_core_version }}/crs-setup.conf"
        owner: "root"
        group: "root"
        mode: "0600"

    - name: "Enable Apache2 Security module"
      community.general.apache2_module:
        state: present
        name: "security2"

- name: "Enable Apache modules"
  notify: "Restart Apache2"
  loop: "{{ install_apache_modules }}"
  loop_control:
    loop_var: module
  community.general.apache2_module:
    state: present
    name: "{{ module }}"

- name: "Disable all other vhosts and clean"
  notify: "Reload Apache2"
  when: install_apache_remove_all_vhosts | default(false)
  block:
    - name: "Find all files in available folder"
      register: vhosts
      ansible.builtin.find:
        paths: "/etc/apache2/sites-available"

    - name: "Remove all other vhosts"
      loop: "{{ vhosts.files }}"
      loop_control:
        loop_var: host
      ansible.builtin.file:
        path: "{{ host.path }}"
        state: absent

    - name: "Find all files in enabled folder"
      register: vhosts
      ansible.builtin.find:
        paths: "/etc/apache2/sites-enabled"
        file_type: link

    - name: "Remove all other vhosts"
      loop: "{{ vhosts.files }}"
      loop_control:
        loop_var: host
      ansible.builtin.file:
        path: "{{ host.path }}"
        state: absent